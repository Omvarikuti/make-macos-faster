#!/usr/bin/env python3

import logging
import logging.config
import os
import sys
import yaml
from pathlib import Path
from logging.handlers import RotatingFileHandler

# --------------------------
# Constants & Default Config
# --------------------------

DEFAULT_CONFIG = {
    "snapshot_size_bytes": 100_000_000_000,
    "snapshot_urgency": 4,
    "telemetry_enabled": False,
    "health_report_path": str(Path.home() / "macos_optimizer_health.txt")
}

CONFIG_FILE_PATH = Path.home() / ".macos_optimizer_config.yaml"
LOG_DIR = Path.home() / "Library" / "Logs"
LOG_FILE = LOG_DIR / "macos_optimizer.log"

# --------------------------
# Configuration Management
# --------------------------

def load_config(config_path=CONFIG_FILE_PATH):
    if config_path.exists():
        with open(config_path, 'r') as file:
            try:
                user_config = yaml.safe_load(file)
                if user_config is None:
                    user_config = {}
                return {**DEFAULT_CONFIG, **user_config}
            except yaml.YAMLError as e:
                print(f"Error parsing configuration file: {e}")
                return DEFAULT_CONFIG
    else:
        return DEFAULT_CONFIG

# --------------------------
# Logging Setup
# --------------------------

def setup_logging(log_file_path=LOG_FILE):
    LOG_DIR.mkdir(parents=True, exist_ok=True)

    logger = logging.getLogger("macos_optimizer")
    logger.setLevel(logging.DEBUG)

    formatter = logging.Formatter(
        "%(asctime)s %(levelname)-8s %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S"
    )

    # Console Handler
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)

    # Rotating File Handler
    file_handler = RotatingFileHandler(
        filename=str(log_file_path),
        maxBytes=5 * 1024 ** 2,  # 5 MB
        backupCount=3
    )
    file_handler.setLevel(logging.DEBUG)
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)

    return logger

# --------------------------
# Main Execution
# --------------------------

def main():
    config = load_config()
    logger = setup_logging()

    logger.info("macOS Optimizer started.")
    logger.debug(f"Loaded configuration: {config}")

    # Placeholder for main functionality
    # ...

    logger.info("macOS Optimizer completed.")

if __name__ == "__main__":
    main()
